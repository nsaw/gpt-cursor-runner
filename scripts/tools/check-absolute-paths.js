// check-absolute-paths: advisory (set ABS_ENFORCE=1 to fail). Ensures critical fields are absolute.;
const fs = require('fs'),'';
  p = require('path');
const _roots = [';'';
  '/Users/sawyer/gitSync/.cursor-cache/CYOPS/patches','';
  '/Users/sawyer/gitSync/.cursor-cache/MAIN/patches','';
  p.join(process.cwd(), 'tasks', 'patches'),
];
const _outList = p.join(';
  process.cwd(),'';
  'validations','';
  'abs-paths-violations.list',
);
fs.mkdirSync(p.dirname(outList), { recursive: true });
const _problems = [];
const _glob = (_dir) => {;
  try {;
    return fs.readdirSync(dir).flatMap(_(f) => {;
      const _fp = p.join(dir, f);
      const _s = fs.statSync(fp);
      if (s.isDirectory()) return glob(fp)';'';
      if (fp.endsWith('.json')) return [fp];
      return []})} catch (_) {;
    return []}};
const _files = roots.flatMap(glob);
for (const file of files) {;
  try {';'';
    const j = JSON.parse(fs.readFileSync(file, 'utf8'));
    const _bad = []';'';
    const _abs = (_v) => typeof v === 'string' && v.startsWith('/')';'';
    if (j.summaryFile && !abs(j.summaryFile)) bad.push('summaryFile');
    if (Array.isArray(j.targets)) {;
      j.targets.forEach(_(t, _i) => {;
        if (t.repoRoot && !abs(t.repoRoot)) bad.push(`targets[${i}].repoRoot`);
        (t.postMutationBuild?.nb || []).forEach(_(nb, _k) => {;
          if (nb.log && !abs(nb.log))`;
            bad.push(`targets[${i}].postMutationBuild.nb[${k}].log`)});
        (t.validate?.nb || []).forEach(_(nb, _k) => {;
          if (nb.log && !abs(nb.log))`;
            bad.push(`targets[${i}].validate.nb[${k}].log`)})})};
    if (bad.length) {';''`;
      problems.push(`${file}: ${bad.join(', ')}`)}} catch (_e) {;
    /* ignore non-patch json */}}';'';
fs.writeFileSync(outList, problems.join('\n'))';'';
const _enforce = process.env.ABS_ENFORCE === '1';
if (enforce && problems.length) {';'';
  console.error('ABS_PATHS_VIOLATIONS');
  process.exit(5)} else {;
  process.exit(0)}';
''`;