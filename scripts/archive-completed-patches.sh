#!/bin/bash

# Archive Completed Patches Script
# Moves processed patches to patches/.archive/ with timestamp

cd /Users/sawyer/gitSync/gpt-cursor-runner

# Create archive directory if it doesn't exist
mkdir -p patches/.archive

# Function to archive a patch
archive_patch() {
    local patch_file="$1"
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local archive_name="$(basename "$patch_file" .json)_archived_${timestamp}.json"
    
    # Move to archive with timestamp
    mv "$patch_file" "patches/.archive/$archive_name"
    echo "$(date): Archived $patch_file to patches/.archive/$archive_name"
}

# Function to check if patch was processed
is_patch_processed() {
    local patch_file="$1"
    local patch_id=$(basename "$patch_file" .json)
    
    # Check if patch appears in patch-log.json
    if [ -f "patch-log.json" ]; then
        if grep -q "\"patch_id\": \"$patch_id\"" patch-log.json 2>/dev/null; then
            return 0  # Patch was processed
        fi
    fi
    
    return 1  # Patch not processed
}

# Function to check if patch was successful
is_patch_successful() {
    local patch_file="$1"
    local patch_id=$(basename "$patch_file" .json)
    
    # Check if patch was successful in patch-log.json
    if [ -f "patch-log.json" ]; then
        if grep -A 10 "\"patch_id\": \"$patch_id\"" patch-log.json | grep -q "\"success\": true" 2>/dev/null; then
            return 0  # Patch was successful
        fi
    fi
    
    return 1  # Patch was not successful
}

echo "$(date): Starting patch archive process..."

# Process all JSON patches in patches directory
for patch_file in patches/*.json; do
    if [ -f "$patch_file" ]; then
        echo "Checking patch: $patch_file"
        
        # Skip if it's the archive directory itself
        if [[ "$patch_file" == "patches/.archive"* ]]; then
            continue
        fi
        
        # Check if patch was processed
        if is_patch_processed "$patch_file"; then
            echo "  ✅ Patch was processed"
            
            # Check if patch was successful
            if is_patch_successful "$patch_file"; then
                echo "  ✅ Patch was successful - archiving"
                archive_patch "$patch_file"
            else
                echo "  ⚠️  Patch was processed but failed - archiving anyway"
                archive_patch "$patch_file"
            fi
        else
            echo "  ⏳ Patch not yet processed - skipping"
        fi
    fi
done

# Create archive summary
archive_summary_file="summaries/summary-patch-archive-$(date +"%Y%m%d_%H%M%S").md"
cat > "$archive_summary_file" << EOF
# Patch Archive Summary

**Date:** $(date +"%Y-%m-%d %H:%M:%S")  
**Archive Location:** patches/.archive/  
**Generated:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")  

## Archive Statistics

- **Total Patches Processed:** $(find patches/.archive -name "*.json" | wc -l)
- **Archive Directory:** patches/.archive/
- **Archive Time:** $(date)

## Archived Patches

$(find patches/.archive -name "*.json" -exec basename {} \; | sort)

## Archive Process

All processed patches (both successful and failed) have been moved to the archive directory with timestamps to prevent reprocessing.

---
*Generated by archive-completed-patches.sh*
EOF

echo "$(date): Patch archive process completed"
echo "📁 Archive summary: $archive_summary_file"
echo "📊 Total archived: $(find patches/.archive -name "*.json" | wc -l) patches" 