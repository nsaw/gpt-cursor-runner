name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  eslint-fullscope:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Ban inline node eval
        run: node scripts/ci/ban_node_eval_guard.js

      - name: Run ESLint fullscope
        run: |
          CACHE_ROOT="$HOME/.cache"
          node scripts/ci/run_eslint_fast_now_once.js 120000 \
            "$CACHE_ROOT/eslint-report.now.json" \
            "$CACHE_ROOT/eslint-now.stdout.log" \
            "$CACHE_ROOT/eslint-now.stderr.log" \
            "scripts/g2o/**/*.{js,ts,tsx}" "scripts/ci/**/*.{js,ts,tsx}" \
            "scripts/metrics/**/*.{js,ts,tsx}" "scripts/validate/**/*.{js,ts,tsx}" \
            "config/**/*.{js,ts,tsx}"

  typescript-noemit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npx tsc --noEmit

  inline-node-e-guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run inline node-e guard
        run: node scripts/g2o/inline_node_e_guard.js --paths scripts/g2o,scripts/ci,scripts/metrics,scripts/validate,config --mode fail-on-violation

  shebang-guard:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run shebang guard
        run: node scripts/ci/shebang_guard_precommit_once.js scripts/ci/*.js scripts/g2o/*.js

  ban-node-e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ban node-e guard
        run: node scripts/ci/ban_node_eval_guard.js

  dashboard-green:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Flake8, Mypy, and Python stubs
        run: |
          pip install flake8 mypy black types-requests types-psutil

      - name: Run Black (check style only)
        run: black --check dashboard/app.py

      - name: Run Flake8 (fail on error)
        run: flake8 dashboard/app.py

      - name: Run Mypy (fail on error)
        run: mypy --strict dashboard/app.py

      - name: Run validation script
        run: bash scripts/validate-dashboard.sh

  test:
    runs-on: ubuntu-latest
    needs: dashboard-green
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r dashboard/requirements.txt
          pip install types-requests types-psutil

      - name: Run tests
        run: |
          python -m pytest tests/ -v

      - name: Test patch runner
        run: |
          # Create a test patch
          mkdir -p patches
          echo '{
            "id": "ci-test-patch",
            "role": "ui_patch",
            "description": "CI test patch",
            "target_file": "test_file.tsx",
            "patch": {
              "pattern": "test",
              "replacement": "✅ CI TEST PASSED"
            }
          }' > patches/ci-test-patch.json

          # Test dry run
          python -m gpt_cursor_runner.patch_runner --force

      - name: Test webhook handler
        run: |
          # Test webhook handler with sample data
          python -c "
          from gpt_cursor_runner.webhook_handler import process_hybrid_block
          import json

          test_block = {
              'id': 'ci-test',
              'role': 'ui_patch',
              'description': 'CI test',
              'target_file': 'test.tsx',
              'patch': {'pattern': 'test', 'replacement': 'replaced'}
          }

          result = process_hybrid_block(test_block)
          print(f'✅ Webhook handler test passed: {result}')
          "
