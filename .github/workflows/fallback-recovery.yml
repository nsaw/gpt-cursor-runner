name: Fallback Recovery Bridge

on:
  workflow_dispatch:
    inputs:
      patch_id:
        description: 'Patch ID to process'
        required: false
        type: string
      target_file:
        description: 'Target file for patch'
        required: false
        type: string
      patch_content:
        description: 'Patch content (JSON)'
        required: false
        type: string
      description:
        description: 'Patch description'
        required: false
        type: string
  repository_dispatch:
    types: [fallback-patch]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  fallback-patch-delivery:
    name: Fallback Patch Delivery
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate patch data
        id: validate
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "patch_id=${{ github.event.inputs.patch_id }}" >> $GITHUB_OUTPUT
            echo "target_file=${{ github.event.inputs.target_file }}" >> $GITHUB_OUTPUT
            echo "patch_content=${{ github.event.inputs.patch_content }}" >> $GITHUB_OUTPUT
            echo "description=${{ github.event.inputs.description }}" >> $GITHUB_OUTPUT
          else
            echo "patch_id=${{ github.event.client_payload.patch_id }}" >> $GITHUB_OUTPUT
            echo "target_file=${{ github.event.client_payload.target_file }}" >> $GITHUB_OUTPUT
            echo "patch_content=${{ github.event.client_payload.patch_content }}" >> $GITHUB_OUTPUT
            echo "description=${{ github.event.client_payload.description }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create patch file
        run: |
          PATCH_ID="${{ steps.validate.outputs.patch_id }}"
          TARGET_FILE="${{ steps.validate.outputs.target_file }}"
          PATCH_CONTENT="${{ steps.validate.outputs.patch_content }}"
          DESCRIPTION="${{ steps.validate.outputs.description }}"
          
          if [ -z "$PATCH_ID" ]; then
            PATCH_ID="fallback-$(date +%Y%m%d_%H%M%S)"
          fi
          
          if [ -z "$TARGET_FILE" ]; then
            TARGET_FILE="README.md"
          fi
          
          if [ -z "$PATCH_CONTENT" ]; then
            PATCH_CONTENT='{"pattern": "## Fallback Patch", "replacement": "## Fallback Patch\n\n✅ Applied via GitHub Actions fallback bridge"}'
          fi
          
          mkdir -p patches
          
          cat > "patches/${PATCH_ID}_$(date +%Y%m%d_%H%M%S).json" << EOF
          {
            "id": "$PATCH_ID",
            "role": "system",
            "target_file": "$TARGET_FILE",
            "patch": $PATCH_CONTENT,
            "description": "$DESCRIPTION",
            "source": "github-fallback",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "fallback_trigger": true
          }
          EOF
          
      - name: Apply patch
        run: |
          echo "🔧 Applying fallback patch..."
          python3 -m gpt_cursor_runner.patch_runner --patch-file "patches/${PATCH_ID}_$(date +%Y%m%d_%H%M%S).json" --dry-run=false --force
          
      - name: Create summary
        run: |
          SUMMARY_FILE="summaries/fallback-recovery-$(date +%Y%m%d_%H%M%S).md"
          
          cat > "$SUMMARY_FILE" << EOF
          # Fallback Recovery Summary - $(date +%Y-%m-%d %H:%M:%S UTC)
          
          ## 🚨 Fallback Triggered
          
          **Trigger Source:** GitHub Actions Fallback Bridge
          **Trigger Type:** ${{ github.event_name }}
          **Patch ID:** ${{ steps.validate.outputs.patch_id }}
          **Target File:** ${{ steps.validate.outputs.target_file }}
          
          ## 📋 Patch Details
          
          - **Description:** ${{ steps.validate.outputs.description }}
          - **Source:** GitHub Actions fallback bridge
          - **Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **Fallback Trigger:** true
          
          ## ✅ Status
          
          Patch applied successfully via GitHub Actions fallback bridge.
          
          ## 🔄 Next Steps
          
          1. Verify patch application
          2. Test affected functionality
          3. Monitor for any issues
          4. Resume normal GHOST operations when available
          
          ---
          *Generated by GitHub Actions fallback bridge*
          EOF
          
      - name: Notify success
        if: success()
        run: |
          echo "✅ Fallback patch delivered successfully"
          echo "📄 Summary created: summaries/fallback-recovery-$(date +%Y%m%d_%H%M%S).md"
          
      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Fallback patch delivery failed"
          echo "🔍 Check logs for details" 